---
title: "NYCTaxi"
author: "한승우(2018-21988)"
format: dashboard
execute: 
  enabled: true
  cache: false
  freeze: false
---

```{python}
#| output: false
# 여기에 온갖코드를 넣음.

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.io as pio

pd.options.plotting.backend = "plotly"
pio.templates.default = "plotly_white"

df = pd.read_csv("https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv").assign(
    log_trip_duration = lambda df: np.log(df.trip_duration),
    pickup_datetime = lambda df: df.pickup_datetime.apply(pd.to_datetime),
    dropoff_datetime = lambda df: df.dropoff_datetime.apply(pd.to_datetime),
    dist = lambda df: np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),
    #---#
    vendor_id = lambda df: df.vendor_id.map({1:'A',2:'B'})
).assign(
    speed = lambda df: df.dist / df.trip_duration,
    pickup_hour = lambda df: df.pickup_datetime.dt.hour,
    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,
    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek
)
df_small = df[::100].reset_index(drop=True)

tidydata1 = df.pivot_table(
    index='pickup_hour',
    columns='dayofweek',
    values='speed',
    aggfunc='mean'
).stack().reset_index().rename({0: 'speed_mean'}, axis=1)

tidydata1['dayofweek'] = tidydata1['dayofweek'].map({0: '월', 1: '화', 2: '수', 3: '목', 4: '금', 5: '토', 6: '일'})

tidydata2 = df.pivot_table(
    index='pickup_hour',
    columns='dayofweek',
    values='dist',
    aggfunc='mean'
).stack().reset_index().rename({0: 'dist_mean'}, axis=1)

tidydata2['dayofweek'] = tidydata2['dayofweek'].map({0: '월', 1: '화', 2: '수', 3: '목', 4: '금', 5: '토', 6: '일'})

pcol = ['pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'pickup_hour']
dcol = ['dropoff_datetime', 'dropoff_longitude', 'dropoff_latitude', 'dropoff_hour']
def transform(df):
    pickup = df.loc[:,['id']+pcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'pickup')
    dropoff = df.loc[:,['id']+dcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'dropoff')
    return pd.concat([pickup,dropoff],axis=0)
df_left = df_small.drop(pcol+dcol,axis=1)
df_right = pd.concat([transform(df) for i, df in df_small.groupby('id')]).reset_index(drop=True)
df_small = df_left.merge(df_right)

tidydata3 = df_small.assign(
    speed_cut = pd.qcut(df_small.speed,4, labels=['매우 느림', '조금 느림', '조금 빠름', '매우 빠름'])
).sort_values('speed_cut')

# 1-(1),(2),(3) 에 대응하는 plotly figure를 아래와 같은 이름으로 저장
fig1 = px.density_heatmap(
    data_frame=tidydata1,
    x='pickup_hour',
    y='dayofweek',
    z='speed_mean',
    nbinsx=24,
    nbinsy=7,
    height=400
)
fig1.update_layout(
    xaxis_title='pickup 시간',
    yaxis_title='요일',
    coloraxis_colorbar_title = '평균속력'
)

fig2 = px.density_heatmap(
    data_frame=tidydata2,
    x='pickup_hour',
    y='dayofweek',
    z='dist_mean',
    nbinsx=23,
    nbinsy=7,
    height=400
)
fig2.update_layout(
    xaxis_title='pickup 시간',
    yaxis_title='요일',
    coloraxis_colorbar_title = '평균이동거리'
)

fig3 = px.line_mapbox(
    data_frame=tidydata3,
    lat = 'latitude',
    lon = 'longitude',
    line_group = 'id',
    color = 'speed_cut',
    center = {'lat':40.7322, 'lon':-73.9052},
    #---#
    mapbox_style = 'carto-positron',
    zoom=11,
 )
scatter_data = px.scatter_mapbox(
    data_frame=tidydata3,
    lat = 'latitude',
    lon = 'longitude',
    size = 'passenger_count',
    size_max = 10,
    color = 'speed_cut',
    #---#
    mapbox_style = 'carto-positron',
    zoom=11,
).data 

for i, trace in enumerate(fig3.data):
    if trace.mode == 'lines':
        trace.name = f'{trace.name} (path)'

for sd in scatter_data:
    sd.name = f'{sd.name} (pickup/dropoff)'
    fig3.add_trace(sd)

fig3.update_traces(line={'width':1}, opacity=0.8)
fig3.update_layout(legend_title='평균속력')
```

# 기말고사1-(1),(2)

```{python}
#| title: 요일,시간에 따른 평균속력 시각화        
fig1.show()
```

```{python}
#| title: 요일,시간에 따른 평균이동거리 시각화        
fig2.show()
```

# 기말고사1-(3)

```{python}
#| title: 속력별 경로 시각화
fig3.show()
```